"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionManager = void 0;
const instancefactory_1 = require("../main/instancefactory");
const aopfactory_1 = require("../main/aop/aopfactory");
const transactionadvice_1 = require("./transactionadvice");
class TransactionManager {
    /**
     * 添加事务Aop操作
     * @param clazz -       事务类
     * @param methodName -  方法名或方法名数组，支持通配符'*'
     */
    static addTransactionAop(clazz, methodName) {
        //如果类尚未添加到实例工厂，则先添加
        if (!instancefactory_1.InstanceFactory.hasClass(clazz)) {
            instancefactory_1.InstanceFactory.addInstance(clazz);
        }
        const pointcutId = 'TransactionAdvice.' + this.pointcutId;
        //数组
        if (Array.isArray(methodName)) {
            for (const n of methodName) {
                const expr = '^' + clazz.name + '.' + n + '$';
                aopfactory_1.AopFactory.addExpression(pointcutId, expr);
            }
        }
        else {
            const expr = '^' + clazz.name + '.' + methodName + '$';
            aopfactory_1.AopFactory.addExpression(pointcutId, expr);
        }
    }
    /**
     * 初始化事务 advice
     */
    static initAdvice() {
        aopfactory_1.AopFactory.registPointcut({
            clazz: transactionadvice_1.TransactionAdvice,
            id: this.pointcutId
        });
        aopfactory_1.AopFactory.registAdvice({
            pointcutId: this.pointcutId,
            type: 'before',
            method: 'before',
            clazz: transactionadvice_1.TransactionAdvice
        });
        aopfactory_1.AopFactory.registAdvice({
            pointcutId: this.pointcutId,
            type: 'after-return',
            method: 'afterReturn',
            clazz: transactionadvice_1.TransactionAdvice
        });
        aopfactory_1.AopFactory.registAdvice({
            pointcutId: this.pointcutId,
            type: 'after-throw',
            method: 'afterThrow',
            clazz: transactionadvice_1.TransactionAdvice
        });
        aopfactory_1.AopFactory.addAspect(transactionadvice_1.TransactionAdvice);
    }
}
exports.TransactionManager = TransactionManager;
/**
 * 事务切点名
 */
TransactionManager.pointcutId = '__NOOMI_TX_POINTCUT';
//# sourceMappingURL=transactionmanager.js.map