"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DBManager = void 0;
const application_1 = require("../tools/application");
const noomierror_1 = require("../tools/noomierror");
const instancefactory_1 = require("../main/instancefactory");
const transactionmanager_1 = require("./transactionmanager");
const threadlocal_1 = require("../tools/threadlocal");
const util_1 = require("../tools/util");
/**
 * 数据库管理器
 * @remarks
 * 用于管理数据库配置、连接对象、事务对象等
 */
class DBManager {
    /**
     * 初始化
     * @param cfg -   配置项,参考数据库配置
     */
    static init(cfg) {
        if (!cfg.package) {
            throw new noomierror_1.NoomiError("4001");
        }
        //从配置的noomi数据库包获取transaction和connection manager类
        const { Transaction, ConnectionManager } = require(cfg.package);
        if (!Transaction || !ConnectionManager) {
            throw new noomierror_1.NoomiError("4002", cfg.package);
        }
        //记录transaction class
        this.transactionClazz = Transaction;
        //实例化connection manager
        this.connectionManager = new ConnectionManager(cfg.options);
        //添加transaction class 到InstanceFactory
        instancefactory_1.InstanceFactory.addInstance(this.transactionClazz, false);
        //事务通知初始化
        transactionmanager_1.TransactionManager.initAdvice();
    }
    /**
     * 解析文件
     * @param path -  文件路径
     */
    static parseFile(path) {
        try {
            const jsonStr = application_1.App.fs.readFileSync(path, 'utf-8');
            const json = util_1.Util.eval(jsonStr);
            this.init(json);
        }
        catch (e) {
            throw new noomierror_1.NoomiError("2800") + '\n' + e;
        }
    }
    /**
     * 获取连接
     * @returns     connection对象(具体connection对象由package确定)
     */
    static async getConnection() {
        const id = this.getAsyncId();
        const obj = this.map.get(id);
        if (obj && obj.conn) {
            return obj.conn;
        }
        //从package对应包中获取connection
        obj.conn = await this.connectionManager.getConnection();
        return obj.conn;
    }
    /**
     * 释放连接
     */
    static async closeConnection() {
        const id = this.getAsyncId();
        const obj = this.map.get(id);
        if (!obj || !obj.conn) {
            return;
        }
        if (obj.tx) {
            obj.tx.commit();
        }
        //调用实际conn关闭方法
        await this.connectionManager.closeConnection(obj.conn);
        //从map移除
        this.map.delete(id);
    }
    /**
     * 获取事务，类型由具体package确定
     * @returns     事务对象
     */
    static async getTransaction() {
        const id = this.getAsyncId();
        let tx = this.map.get(id).tx;
        if (!tx) {
            tx = instancefactory_1.InstanceFactory.getInstance(this.transactionClazz);
            this.map.get(id).tx = tx;
        }
        return tx;
    }
    /**
     * 移除事务
     */
    static async removeTransaction() {
        const id = threadlocal_1.NoomiThreadLocal.getThreadId();
        if (id && this.map.has(id)) {
            delete this.map.get(id).tx;
        }
    }
    /**
     * 获取异步id
     * @returns     异步id
     */
    static getAsyncId() {
        let id = threadlocal_1.NoomiThreadLocal.getThreadId();
        if (!id) {
            id = threadlocal_1.NoomiThreadLocal.newThreadId();
        }
        if (!this.map.has(id)) {
            this.map.set(id, {});
        }
        return id;
    }
}
exports.DBManager = DBManager;
/**
 * 连接和事物map
 * @remarks
 * 存放connection和transaction实例，键为thread id，值为object，格式为
 * ```json
 * {
 *      conn:连接对象
 *      tx:事务对象
 * }
 * ```
 */
DBManager.map = new Map();
//# sourceMappingURL=dbmanager.js.map