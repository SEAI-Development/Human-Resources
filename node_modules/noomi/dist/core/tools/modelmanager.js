"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelManager = void 0;
const tipmanager_1 = require("./tipmanager");
const util_1 = require("./util");
const validator_1 = require("./validator");
/**
 * model管理器
 * @remarks
 * 管理所有DataModel的数据校验、类型转换信息并提供校验和类型转换操作
 */
class ModelManager {
    /**
     * 增加null check
     * @param className -   类名
     * @param methodName -  方法名
     * @param props -       检测数组
     */
    static setNullCheck(className, methodName, props) {
        const name = className + '.' + methodName;
        if (!this.nullCheckMap.has(name)) {
            this.nullCheckMap.set(name, props);
        }
    }
    /**
     * 获取空校验属性数组
     * @param className -   类名
     * @param methodName -  方法名
     * @returns             空校验属性数组
     */
    static getNullCheck(className, methodName) {
        return this.nullCheckMap.get(className + '.' + methodName);
    }
    /**
     * 设置属性
     * @param className -   类名
     * @param propName -    属性名
     * @param cfg -         配置项，包含类型和校验器
     */
    static setProp(className, propName, cfg) {
        if (!this.propMap.has(className)) {
            const obj = {};
            obj[propName] = cfg;
            this.propMap.set(className, obj);
        }
        else {
            this.propMap.get(className)[propName] = cfg;
        }
    }
    /**
     * 获取属性配置
     * @param clazz -       类
     * @param propName -    属性名
     * @returns             属性配置
     */
    static getProp(clazz, propName) {
        //如果找不到，则从父类查找
        while (clazz.name && clazz.name !== '' && clazz.name !== 'Object') {
            if (this.propMap.has(clazz.name)) {
                const obj = this.propMap.get(clazz.name);
                if (obj[propName]) {
                    return obj[propName];
                }
            }
            //找父类
            clazz = clazz['__proto__'];
        }
    }
    /**
     * 转换和校验，返回数据类型或校验不正确的属性消息集合
     * @param route -       路由对象
     * @param methodName -  方法名
     * @param model -       待处理模型
     * @returns             类型转换或校验结果
     */
    static handle(route, methodName, model) {
        const errObj = {};
        //空校验
        const nullArr = this.getNullCheck(route.constructor.name, methodName);
        if (nullArr) {
            for (const p of nullArr) {
                const r = validator_1.Validator.validate('nullable', model[p]);
                if (!r) {
                    errObj[p] = tipmanager_1.TipManager.getModel('nullable');
                }
            }
        }
        //对所有自有属性进行教养
        for (const p in model) {
            // 空校验异常的属性不处理，方法不处理
            if (errObj[p] || typeof model[p] === 'function') {
                continue;
            }
            const cfg = this.getProp(model.constructor, p);
            //如果不存在配置项，则表示不属于模型，删除
            if (!cfg) {
                delete model[p];
                continue;
            }
            //类型转换
            if (cfg.type) {
                const typeMsg = this.transform(model, p, cfg.type);
                if (typeMsg) {
                    errObj[p] = typeMsg;
                }
            }
            //校验，如果转换错误，则不再校验
            if (!errObj[p] && cfg.validator) {
                const r = this.validate(model, p, cfg.validator);
                if (r !== null) {
                    errObj[p] = r;
                }
            }
        }
        return Object.getOwnPropertyNames(errObj).length === 0 ? null : errObj;
    }
    /**
     * 验证
     * @param model -       模型
     * @param name -        属性名
     * @param validator -   校验器
     * @returns     null或字符串(表示验证异常)
     */
    static validate(model, name, validator) {
        const value = model[name];
        for (const vn of Object.keys(validator)) {
            if (validator_1.Validator.hasValidator(vn)) {
                const r = validator_1.Validator.validate(vn, value, ...validator[vn]);
                if (!r) {
                    return tipmanager_1.TipManager.getModel(vn, ...validator[vn]);
                }
            }
            else if (model[vn] && typeof model[vn] === 'function') { // 模型自定义校验器
                const r = model[vn](value, validator[vn]);
                if (r !== null) {
                    return r;
                }
            }
        }
        return null;
    }
    /**
     * 数据格式转换
     * @param model -   模型
     * @param name -    属性名
     * @returns         如果失败，则返回失败信息
     */
    static transform(model, name, type) {
        let v = model[name];
        const tp = typeof v;
        // 非字符串，需要去掉两端空格
        if (type !== 'string' && tp === 'string') {
            v = v.trim();
            // 非字符串，且为''，则删除
            if (v === '') {
                delete model[name];
                return;
            }
        }
        // 类型不为string则不转换
        if (tp === 'string') {
            switch (type) {
                case 'int': // 整数
                    if (/(^[\+\-]?0$)|(^[\+\-]?[1-9]\d*$)/.test(v)) {
                        v = parseInt(v);
                    }
                    else {
                        return tipmanager_1.TipManager.getModel(type);
                    }
                    break;
                case 'float': // 小数
                    if (/^[\+\-]?\d+(\.?\d+)?$/.test(v)) {
                        v = parseFloat(v);
                    }
                    else {
                        return tipmanager_1.TipManager.getModel(type);
                    }
                    break;
                case 'number': //数字
                    if (/^[\+\-]?\d+(\.?\d+)?$/.test(v)) {
                        v = Number(v);
                    }
                    else {
                        return tipmanager_1.TipManager.getModel(type);
                    }
                    break;
                case 'boolean': // bool
                    if (v === 'true') {
                        v = true;
                    }
                    else if (v === 'false') {
                        v = false;
                    }
                    else {
                        return tipmanager_1.TipManager.getModel(type);
                    }
                    break;
                case 'array': // 数组类型
                    try {
                        v = util_1.Util.eval(v);
                        if (!Array.isArray(v)) {
                            return tipmanager_1.TipManager.getModel(type);
                        }
                    }
                    catch (e) {
                        return tipmanager_1.TipManager.getModel(type);
                    }
                    break;
                case 'object': // object类型
                    try {
                        v = util_1.Util.eval(v);
                        if (typeof v !== 'object') {
                            return tipmanager_1.TipManager.getModel(type);
                        }
                    }
                    catch (e) {
                        return tipmanager_1.TipManager.getModel(type);
                    }
                    break;
                default: // 字符串不处理
            }
        }
        model[name] = v;
    }
}
exports.ModelManager = ModelManager;
/**
 * 模型map
 * @remarks
 * key: model类名
 *
 * value:配置项
 * ```json
 * {
 *      propName:{
 *          type:'类型',
 *          validator:{validator1:[],...}
 *      },
 *      ...
 * }
 * ```
 */
ModelManager.propMap = new Map();
/**
 * null检测属性map
 * @remarks
 * 按遗下方式存储，key:类名.方法名，value:需要nullcheck的字段数组
 * ```json
 * {
 *      className.methodName:[nullCheckField1,nullCheckField2,...]
 * }
 * ```
 */
ModelManager.nullCheckMap = new Map();
//# sourceMappingURL=modelmanager.js.map