"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LaunchHook = exports.Logger = exports.NullCheck = exports.Prop = exports.DataModel = exports.Transaction = exports.Transactioner = exports.AfterThrow = exports.AfterReturn = exports.Around = exports.After = exports.Before = exports.Pointcut = exports.Aspect = exports.WebHandler = exports.WebFilter = exports.Route = exports.Router = exports.Inject = exports.Instance = void 0;
/**
 * 装饰器（注解类）
 */
const instancefactory_1 = require("../main/instancefactory");
const filterfactory_1 = require("../web/filterfactory");
const transactionmanager_1 = require("../database/transactionmanager");
const routefactory_1 = require("../main/route/routefactory");
const webafterhandler_1 = require("../web/webafterhandler");
const logmanager_1 = require("../log/logmanager");
const launchhookmanager_1 = require("./launchhookmanager");
const aopfactory_1 = require("../main/aop/aopfactory");
const modelmanager_1 = require("./modelmanager");
/**
 * instance装饰器，添加实例到实例工厂，装饰类
 * @param cfg - 配置项或singleton设置，如果为boolean，则为singleton设置
 */
function Instance(cfg) {
    return (target) => {
        instancefactory_1.InstanceFactory.addInstance(target, cfg);
    };
}
exports.Instance = Instance;
/**
 * IoC注入装饰器，装饰属性
 * @param clazz -   注入类
 */
function Inject(clazz) {
    return (target, propertyName) => {
        instancefactory_1.InstanceFactory.inject(target.constructor, propertyName, clazz);
    };
}
exports.Inject = Inject;
/**
 * 路由类装饰器，装饰类
 * @param cfg - 配置项，如果为字符串，则表示为namespace
 *
 * 说明：
 *
 *   namespace:命名空间，可选，namespace+path匹配的方法名=路由完整路径
 *
 *   path:路径，支持通配符,如: "*"表示该类下的所有方法，"add*"表示以add开头的所有方法
 */
function Router(cfg) {
    return (target) => {
        // 如果配置了path，则追加到路由，对所有方法有效
        if (cfg) {
            //如果为字符串，则设置为namespace
            if (typeof cfg === 'string') {
                cfg = {
                    namespace: cfg.trim()
                };
            }
            else if (typeof cfg === 'object') {
                if (cfg.path) {
                    cfg.path = cfg.path.trim();
                }
                if (cfg.namespace) {
                    cfg.namespace = cfg.namespace.trim();
                }
            }
        }
        else {
            cfg = {};
        }
        //默认为/
        if (!cfg.namespace || cfg.namespace === '') {
            cfg.namespace = '/';
        }
        //默认为*
        if (!cfg.path || cfg.path === '') {
            cfg.path = '*';
        }
        cfg.clazz = target;
        routefactory_1.RouteFactory.registRoute(cfg);
    };
}
exports.Router = Router;
/**
 * 路由装饰器，装饰方法
 * @param cfg - 配置项，如果为string，则为路由路径，默认type=‘json’
 *
 */
function Route(cfg) {
    return (target, propertyName) => {
        if (typeof cfg === 'string') { //直接配置路径，默认type json
            routefactory_1.RouteFactory.registRoute({
                path: cfg,
                clazz: target.constructor,
                method: propertyName
            });
        }
        else {
            cfg.clazz = target.constructor;
            cfg.method = propertyName;
            routefactory_1.RouteFactory.registRoute(cfg);
        }
    };
}
exports.Route = Route;
/**
 * web过滤器，装饰方法
 * @param pattern - RegExp|Array<RegExp>  过滤正则表达式或表达式数组，默认为 .*，过滤所有请求
 * @param order -   number                优先级，值越小优先级越高，默认10000，可选
 */
function WebFilter(pattern, order) {
    return (target, name) => {
        if (!Array.isArray(pattern)) {
            pattern = [pattern];
        }
        filterfactory_1.FilterFactory.addFilter({
            clazz: target.constructor,
            method: name,
            patterns: pattern,
            order: order
        });
    };
}
exports.WebFilter = WebFilter;
/**
 * web后置处理器，装饰方法
 * @param pattern - 过滤正则表达式或表达式数组，默认为 .*，处理所有请求
 * @param order -   优先级，值越小优先级越高，默认10000，可选
 */
function WebHandler(pattern, order) {
    return (target, name) => {
        if (!Array.isArray(pattern)) {
            pattern = [pattern];
        }
        webafterhandler_1.WebAfterHandler.addHandler({
            clazz: target.constructor,
            method: name,
            patterns: pattern,
            order: order
        });
    };
}
exports.WebHandler = WebHandler;
/**
 * 切面装饰器，装饰类
 */
function Aspect() {
    return (target) => {
        // 处理切面
        aopfactory_1.AopFactory.addAspect(target);
    };
}
exports.Aspect = Aspect;
/**
 * 切点装饰器，切点名为属性名，装饰属性
 * @param expressions - 切点需要拦截的表达式串数组
 * @remarks
 * 支持通配符*，拦截对象为instanceName.methodName，
 *
 * 如`user*.*`拦截实例名为user开头的实例下的所有方法，
 *
 * `userX.m1`拦截实例名为userX的m1方法
 */
function Pointcut(expressions) {
    return (target, name) => {
        aopfactory_1.AopFactory.registPointcut({
            id: name,
            expressions: expressions,
            clazz: target.constructor
        });
    };
}
exports.Pointcut = Pointcut;
/**
 * 通知装饰器 before，装饰方法
 * @param pointcutId -  切点id
 */
function Before(pointcutId) {
    return (target, name) => {
        aopfactory_1.AopFactory.registAdvice({
            pointcutId: pointcutId,
            type: 'before',
            clazz: target.constructor,
            method: name
        });
    };
}
exports.Before = Before;
/**
 * 通知装饰器 after，装饰方法
 * @param pointcutId -  切点id
 */
function After(pointcutId) {
    return (target, name) => {
        aopfactory_1.AopFactory.registAdvice({
            pointcutId: pointcutId,
            type: 'after',
            clazz: target.constructor,
            method: name
        });
    };
}
exports.After = After;
/**
 * 通知装饰器 around，装饰方法
 * @param pointcutId -  切点id
 */
function Around(pointcutId) {
    return (target, name) => {
        aopfactory_1.AopFactory.registAdvice({
            pointcutId: pointcutId,
            type: 'around',
            clazz: target.constructor,
            method: name
        });
    };
}
exports.Around = Around;
/**
 * 通知装饰器 after-return，装饰方法
 * @param pointcutId -  切点id
 */
function AfterReturn(pointcutId) {
    return (target, name) => {
        aopfactory_1.AopFactory.registAdvice({
            pointcutId: pointcutId,
            type: 'after-return',
            clazz: target.constructor,
            method: name
        });
    };
}
exports.AfterReturn = AfterReturn;
/**
 * 通知装饰器 after-throw，装饰方法
 * @param pointcutId -  切点id
 */
function AfterThrow(pointcutId) {
    return (target, name) => {
        aopfactory_1.AopFactory.registAdvice({
            pointcutId: pointcutId,
            type: 'after-throw',
            clazz: target.constructor,
            method: name
        });
    };
}
exports.AfterThrow = AfterThrow;
/**
 * 事务类装饰器，装饰类
 * @remarks
 * 把符合条件的方法装饰为事务方法，如果没有使用Instance装饰器，则会默认添加
 *
 * @param methodReg - 方法名表达式，字符串或字符串数组，可以使用含`*`的通配符，默认为`*`，表示该实例的所有方法都为事务方法
 */
function Transactioner(methodReg) {
    return (target) => {
        transactionmanager_1.TransactionManager.addTransactionAop(target, methodReg || '*');
    };
}
exports.Transactioner = Transactioner;
/**
 * 事务方法装饰器，装饰方法
 * @remarks
 * 如果没有Transactioner和Instance修饰此方法对应的类，则会默认添加Instance装饰器
 */
function Transaction() {
    return (target, name) => {
        transactionmanager_1.TransactionManager.addTransactionAop(target.constructor, name);
    };
}
exports.Transaction = Transaction;
/**
 * 数据模型装饰器，装饰类
 * @param clazz - 模型类
 */
function DataModel(clazz) {
    return (target) => {
        target.__modelClass = clazz;
    };
}
exports.DataModel = DataModel;
/**
 * 属性装饰器，装饰属性，使用DataModel时有效
 * @param cfg - 配置项，如果为字符串，则表示为类型
 */
function Prop(cfg) {
    return (target, name) => {
        if (cfg) {
            if (typeof cfg === 'string') {
                modelmanager_1.ModelManager.setProp(target.constructor.name, name, { type: cfg });
            }
            else {
                if (cfg.validator && typeof cfg.validator === 'string') {
                    const o = {};
                    o[cfg.validator] = [];
                    cfg.validator = o;
                }
                modelmanager_1.ModelManager.setProp(target.constructor.name, name, cfg);
            }
        }
        else {
            modelmanager_1.ModelManager.setProp(target.constructor.name, name, {});
        }
    };
}
exports.Prop = Prop;
/**
 * 数据null检查，装饰路由方法
 * @param props -     待检查属性数组
 */
function NullCheck(props) {
    return (target, name) => {
        modelmanager_1.ModelManager.setNullCheck(target.constructor.name, name, props);
    };
}
exports.NullCheck = NullCheck;
/**
 * 日志装饰器，装饰类
 * @param cfg -  配置对象
 */
function Logger(cfg) {
    return (target) => {
        if (!cfg.expression) {
            cfg.expression = ['*'];
        }
        else if (!Array.isArray(cfg.expression)) {
            cfg.expression = [cfg.expression];
        }
        logmanager_1.LogManager.init(cfg);
    };
}
exports.Logger = Logger;
/**
 * 钩子函数装饰器，装饰方法
 * @remarks
 * 用于项目初始化完成后的自定义代码执行
 * @param params -      钩子方法的参数数组
 */
function LaunchHook(params) {
    return (target, methodName) => {
        if (!params) {
            params = [];
        }
        launchhookmanager_1.LaunchHookManager.init({
            clazz: target.constructor,
            method: methodName,
            params: params
        });
    };
}
exports.LaunchHook = LaunchHook;
//# sourceMappingURL=decorator.js.map