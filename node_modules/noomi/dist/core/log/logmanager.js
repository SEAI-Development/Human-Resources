"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogManager = void 0;
const aopfactory_1 = require("../main/aop/aopfactory");
const logadvice_1 = require("./logadvice");
/**
 * 日志管理类
 * @remarks
 * 用于管理各类日志
 */
class LogManager {
    /**
     * 日志配置初始化
     * @param cfg -   配置对象
     * @remarks
     * type: default表示输出到控制台，file表示输出到文件
     *
     * expression: 表达式字符串数组
     */
    static init(cfg) {
        const log4js = require('log4js');
        log4js.configure({
            // 配置日志的输出源
            appenders: {
                // 日志输出到控制台，默认方式 
                consoleout: { type: "console" },
                // 日志输出到文件
                fileout: { type: "file", filename: "noomilogger.log" },
                // 日志输出到文件，并按特定的日期模式滚动
                datefileout: {
                    type: "dateFile",
                    filename: "datefileout.log",
                    pattern: ".yyyy-MM-dd-hh-mm-ss-SSS"
                }
            },
            categories: {
                default: { appenders: ["consoleout"], level: "info" },
                file: { appenders: ["fileout"], level: "info" }
            }
        });
        this.logger = log4js.getLogger(cfg.type);
        let expr = cfg.expression;
        if (expr) {
            if (!Array.isArray(expr)) {
                expr = [expr];
            }
        }
        this.initAdvice(expr);
    }
    /**
     * 初始化通知
     * @param expression - 表达式数组
     */
    static initAdvice(expression) {
        aopfactory_1.AopFactory.registPointcut({
            clazz: logadvice_1.LogAdvice,
            id: this.pointcutId,
            expressions: expression
        });
        aopfactory_1.AopFactory.registAdvice({
            clazz: logadvice_1.LogAdvice,
            pointcutId: this.pointcutId,
            method: 'beforeLogger',
            type: 'before'
        });
        aopfactory_1.AopFactory.registAdvice({
            clazz: logadvice_1.LogAdvice,
            pointcutId: this.pointcutId,
            method: 'returnLogger',
            type: 'after-return'
        });
        aopfactory_1.AopFactory.registAdvice({
            clazz: logadvice_1.LogAdvice,
            pointcutId: this.pointcutId,
            method: 'throwLogger',
            type: 'after-throw'
        });
        aopfactory_1.AopFactory.addAspect(logadvice_1.LogAdvice);
    }
}
exports.LogManager = LogManager;
/**
 * 切点名
 */
LogManager.pointcutId = '__NOOMI_LOG_POINTCUT';
//# sourceMappingURL=logmanager.js.map