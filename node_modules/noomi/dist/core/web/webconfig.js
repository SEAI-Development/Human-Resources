"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebConfig = void 0;
const webcache_1 = require("./webcache");
const noomierror_1 = require("../tools/noomierror");
const sessionfactory_1 = require("./sessionfactory");
const application_1 = require("../tools/application");
const pagefactory_1 = require("../tools/pagefactory");
const staticresource_1 = require("./staticresource");
const util_1 = require("../tools/util");
/**
 * web 配置类
 * @remarks
 * 用于管理web配置参数
 */
class WebConfig {
    /**
     * 获取参数
     * @param name - webconfig参数名
     */
    static get(name) {
        if (this.config && this.config.web_config) {
            return this.config.web_config[name];
        }
    }
    /**
     * 初始化
     * @param config - 参阅web.json配置
     */
    static init(config) {
        if (config.hasOwnProperty('web_config')) {
            const cfg = config['web_config'];
            if (cfg.cache === true) {
                const opt = cfg.cache_option;
                WebConfig.useServerCache = true;
                webcache_1.WebCache.init({
                    save_type: opt.save_type || 0,
                    max_age: opt.max_age || 1800,
                    redis: opt.redis || 'default',
                    expires: opt.expires || 0,
                    public: opt.public || true,
                    private: opt.private || false,
                    no_cache: opt.no_cache || false,
                    no_store: opt.no_store || false,
                    must_revalidation: opt.must_revalidation || false,
                    proxy_revalidation: opt.proxy_revalidation || false
                });
            }
            // static path
            if (cfg.hasOwnProperty('static_path')) {
                staticresource_1.StaticResource.addPath(cfg['static_path']);
            }
            this.cors = cfg['cors'];
            this.welcomePage = cfg['welcome'];
            this.config = config;
        }
        if (config.hasOwnProperty('session')) {
            sessionfactory_1.SessionFactory.init(config['session']);
        }
        // errorPage
        if (config.hasOwnProperty('error_page')) {
            this.setErrorPages(config['error_page']);
        }
        // https 配置
        if (config.hasOwnProperty('https')) {
            const opt = config['https'];
            if (opt['key_file'] && typeof opt['key_file'] === 'string' && opt['key_file'] !== ''
                && opt['cert_file'] && typeof opt['cert_file'] === 'string' && opt['cert_file'] !== '') {
                this.useHttps = true;
                this.httpsCfg = {
                    'only_https': opt['only_https'],
                    'key_file': util_1.Util.getAbsPath([opt['key_file']]),
                    'cert_file': util_1.Util.getAbsPath([opt['cert_file']])
                };
            }
        }
    }
    /**
     * 解析路由文件
     * @param path -  文件路径
     */
    static parseFile(path) {
        // 读取文件
        let json;
        try {
            const jsonStr = application_1.App.fs.readFileSync(path, 'utf-8');
            json = util_1.Util.eval(jsonStr);
        }
        catch (e) {
            throw new noomierror_1.NoomiError("2100") + '\n' + e;
        }
        this.init(json);
    }
    /**
     * 设置异常页面
     * @param pages - page配置数组
     * ```json
     *  [{
     *      code:http异常码,
     *      location:异常码对应页面地址(相对于项目根目录)
     *  }]
     * ```
     */
    static setErrorPages(pages) {
        if (Array.isArray(pages)) {
            pages.forEach((item) => {
                // 需要判断文件是否存在
                if (application_1.App.fs.existsSync(util_1.Util.getAbsPath([item['location']]))) {
                    pagefactory_1.PageFactory.addErrorPage(item['code'], item['location']);
                }
            });
        }
    }
}
exports.WebConfig = WebConfig;
/**
 * 是否使用cache
 */
WebConfig.useServerCache = false;
//# sourceMappingURL=webconfig.js.map