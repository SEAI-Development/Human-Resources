"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestQueue = void 0;
const webconfig_1 = require("./webconfig");
const routetypes_1 = require("../types/routetypes");
const filterfactory_1 = require("./filterfactory");
const staticresource_1 = require("./staticresource");
const application_1 = require("../tools/application");
const pagefactory_1 = require("../tools/pagefactory");
const util_1 = require("../tools/util");
const webcache_1 = require("./webcache");
const webafterhandler_1 = require("./webafterhandler");
const noomierror_1 = require("../tools/noomierror");
const routefactory_1 = require("../main/route/routefactory");
/**
 * 请求队列
 */
//TODO v1.0.1 添加忙时延迟访问
class RequestQueue {
    /**
     * 资源访问
     * @param request -   request
     */
    static async handle(request) {
        const response = request.response;
        switch (request.method) {
            case 'OPTIONS':
                response.doOptions();
                return;
            case 'DELETE':
                response.writeToClient({
                    statusCode: 405
                });
                return;
            case 'PUT':
                response.writeToClient({
                    statusCode: 405
                });
                return;
            case 'PATCH':
                response.writeToClient({
                    statusCode: 405
                });
                return;
        }
        // gzip
        const zipStr = request.getHeader("accept-encoding");
        const gzip = zipStr && zipStr.indexOf('gzip') !== -1 ? true : false;
        let path = application_1.App.url.parse(request.url).pathname;
        //路径解码
        try {
            path = decodeURI(path);
        }
        catch (e) { }
        let data;
        // welcome页面
        if (path === '' || path === '/') {
            if (webconfig_1.WebConfig.welcomePage) {
                path = webconfig_1.WebConfig.welcomePage;
            }
        }
        // 前置过滤器执行
        if (!await filterfactory_1.FilterFactory.doChain(request.url, request, response)) {
            return;
        }
        // 从路由查找
        const route = routefactory_1.RouteFactory.getRoute(path);
        if (route !== null) {
            // 执行
            try {
                data = await routefactory_1.RouteFactory.handleRoute(route, request, response);
                // 重定向直接返回
                if (data === routetypes_1.ERouteResultType.REDIRECT) {
                    return;
                }
            }
            catch (e) {
                // 如果非Error，需要转换为NoomiError
                if (!(e instanceof Error)) {
                    e = new noomierror_1.NoomiError(e);
                }
                data = e;
            }
        }
        else { // 静态资源
            // 从web cache获取数据
            data = await webcache_1.WebCache.load(request, response, path);
            if (!data) {
                // 加载静态数据
                data = await staticresource_1.StaticResource.load(request, response, path, gzip);
            }
        }
        // 后置过滤器执行
        data = await webafterhandler_1.WebAfterHandler.doChain(request.url, data, request, response);
        this.handleResult(response, data, path, gzip);
    }
    /**
     * 处理结果
     * @param response -  response对象
     * @param data -      数据或数据对象
     * @param path -      资源路径
     * @param isZip -     是否zip
     */
    static handleResult(response, data, path, isZip) {
        if (!data) {
            return;
        }
        if (typeof data === 'number') { //http 异常码
            if (data !== 0) {
                const page = pagefactory_1.PageFactory.getErrorPage(data);
                if (page && application_1.App.fs.existsSync(util_1.Util.getAbsPath([page]))) {
                    response.redirect(page);
                }
                else {
                    response.writeToClient({
                        statusCode: data
                    });
                }
            }
        }
        else if (typeof data === 'object') {
            const cData = data;
            // json格式为utf8，zip和流用binary
            const charset = data['mimeType'] && data['mimeType'].indexOf('/json') === -1 || isZip && cData.zipData ? 'binary' : 'utf8';
            // 写web cache相关参数
            webcache_1.WebCache.writeCacheToClient(response, cData.etag, cData.lastModified);
            // 可能只缓存静态资源信息，所以需要判断数据
            if (isZip && cData.zipData) { // 压缩数据
                response.writeToClient({
                    data: cData.zipData,
                    type: cData.mimeType,
                    size: cData.zipSize,
                    zip: 'gzip',
                    charset: charset
                });
            }
            else if (cData.etag) { // 文件
                response.writeFileToClient({
                    data: util_1.Util.getAbsPath([path]),
                    type: cData.mimeType,
                    size: cData.dataSize
                });
            }
            else if (cData.data) { // 数据
                response.writeToClient({
                    data: cData.data,
                    type: cData.mimeType,
                    size: cData.dataSize,
                    charset: charset
                });
            }
            else { // 数据对象
                response.writeToClient({
                    data: cData.data,
                    charset: charset
                });
            }
        }
        else { // 非对象
            response.writeToClient({
                data: data
            });
        }
    }
}
exports.RequestQueue = RequestQueue;
//# sourceMappingURL=requestqueue.js.map