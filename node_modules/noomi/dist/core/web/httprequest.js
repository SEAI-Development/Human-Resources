"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpRequest = void 0;
const http_1 = require("http");
const sessionfactory_1 = require("./sessionfactory");
const httpresponse_1 = require("./httpresponse");
const webconfig_1 = require("./webconfig");
const application_1 = require("../tools/application");
const util_1 = require("../tools/util");
const noomierror_1 = require("../tools/noomierror");
const postformhandler_1 = require("./postformhandler");
const postfileparamhandler_1 = require("./postfileparamhandler");
const posttexthandler_1 = require("./posttexthandler");
/**
 * http请求
 * @remarks
 * 在IncomingMessage基础上增加了参数解析等方法，更适合直接使用
 */
class HttpRequest extends http_1.IncomingMessage {
    /**
     * 构造器
     * @param req - 源IncommingMessage对象(createServer时传入)
     * @param res - 源ServerResponse对象(createServer时传入)
     */
    constructor(req, res) {
        super(req.socket);
        /**
         * 参数对象
         */
        this.parameters = {};
        this.srcReq = req;
        // response 初始化
        this.response = new httpresponse_1.HttpResponse(req);
        this.response.init(req, res);
        this.url = req.url;
        this.method = req.method;
        this.initQueryString();
    }
    /**
     * 初始化
     * @returns 请求参数
     */
    async init() {
        // 非 post
        if (this.method !== 'POST') {
            return this.parameters;
        }
        const obj = await this.postHandle();
        // 合并参数
        if (typeof obj === 'object') {
            Object.getOwnPropertyNames(obj).forEach(key => {
                // 已存在该key，需要做成数组
                if (this.parameters[key]) {
                    if (!Array.isArray(this.parameters[key])) {
                        this.parameters[key] = [this.parameters[key]];
                    }
                    this.parameters[key].push(obj[key]);
                }
                else {
                    this.parameters[key] = obj[key];
                }
            });
        }
        return this.parameters;
    }
    /**
     * 获取请求消息头信息
     * @param key - 消息头名，具体取值参考message.headers
     * @returns     消息值
     */
    getHeader(key) {
        return this.srcReq.headers[key];
    }
    /**
     * 获取请求方法，入GET、POSt等
     */
    getMethod() {
        return this.srcReq.method;
    }
    /**
     * 获取来源url路径
     */
    getUrl() {
        return this.srcReq.url;
    }
    /**
     * 获取socket，可以通过socket获取远程地址、本地地址等
     * @returns     socket对象
     */
    getSocket() {
        return this.srcReq.socket;
    }
    /**
     * 设置参数
     * @param name -    参数名
     * @param value -   参数值
     */
    setParameter(name, value) {
        this.parameters[name] = value;
    }
    /**
     * 获取参数
     * @param name -    参数名
     * @returns         参数值
     */
    getParameter(name) {
        return this.parameters[name];
    }
    /**
     * 获取所有paramter
     * @returns         参数object
     */
    getAllParameters() {
        return this.parameters;
    }
    /**
     * 初始化url查询串
     */
    initQueryString() {
        this.parameters = application_1.App.qs.parse(application_1.App.url.parse(this.url).query);
    }
    /**
     * 获取session
     * @returns   session对象
     */
    async getSession() {
        return await sessionfactory_1.SessionFactory.getSession(this);
    }
    /**
     * POST时的参数处理
     * @returns     参数值对象
     */
    postHandle() {
        const req = this.srcReq;
        const contentString = req.headers['content-type'];
        if (!contentString) {
            return Promise.reject(new noomierror_1.NoomiError('0502'));
        }
        const contentTypeObj = this.handleContentType(contentString);
        const contentLen = parseInt(req.headers['content-length']);
        const maxSize = webconfig_1.WebConfig.get('upload_max_size');
        // 不能大于max size
        if (maxSize > 0 && contentLen > maxSize) {
            // 上传文件超过最大限制
            return Promise.reject(new noomierror_1.NoomiError('0501'));
        }
        // 临时目录，默认 /upload/tmp
        const tmpDir = webconfig_1.WebConfig.get('upload_tmp_dir') || '/upload/tmp';
        const tmpDir1 = util_1.Util.getAbsPath([tmpDir]);
        // 如果临时目录不存在，则生成临时目录
        if (!application_1.App.fs.existsSync(tmpDir1)) {
            application_1.App.fs.mkdirSync(tmpDir1, { recursive: true });
        }
        let fileHandler;
        let formHandler;
        let textHandler;
        // post类型 0:form-data 1:文本串 2:独立文件
        let postType;
        if (contentTypeObj['type'].indexOf('form-data') !== -1) {
            formHandler = new postformhandler_1.PostFormHandler(contentTypeObj['boundary'], tmpDir);
            postType = 0;
        }
        else if (contentTypeObj['type'].startsWith('text/') ||
            contentTypeObj['type'] === 'application/json' ||
            contentTypeObj['type'] === 'application/x-www-form-urlencoded') { // 文本
            textHandler = new posttexthandler_1.PostTextHandler(contentTypeObj);
            postType = 1;
        }
        else if (contentTypeObj['type'].startsWith('image') ||
            contentTypeObj['type'].startsWith('video') ||
            contentTypeObj['type'].startsWith('audio') ||
            contentTypeObj['type'].startsWith('application/')) { // 独立文件
            postType = 2;
            fileHandler = new postfileparamhandler_1.PostFileHandler(tmpDir, contentTypeObj['type']);
        }
        return new Promise((resolve) => {
            req.on('data', (chunk) => {
                switch (postType) {
                    case 0:
                        formHandler.handleBuf(chunk);
                        break;
                    case 1:
                        textHandler.handleBuf(chunk);
                        break;
                    case 2:
                        fileHandler.handleBuf(chunk);
                }
            });
            req.on('end', () => {
                switch (postType) {
                    case 0:
                        resolve(formHandler.getResult());
                        return;
                    case 1:
                        resolve(textHandler.getResult());
                        return;
                    case 2:
                        resolve(fileHandler.getResult());
                }
            });
        });
    }
    /**
     * 处理content-typestring
     * @param contentTypeString -   content-type串
     * @returns                     content-type 配置对象
     */
    handleContentType(contentTypeString) {
        const arr = contentTypeString.replace(/\s+/g, '').split(';');
        const obj = {};
        for (const t of arr) {
            if (t.startsWith('boundary=')) {
                obj['boundary'] = t.split('=')[1];
            }
            else if (t.startsWith('charset=')) {
                obj['charset'] = t.split('=')[1];
            }
            else if (t.indexOf('=') === -1) {
                obj['type'] = t;
            }
        }
        return obj;
    }
}
exports.HttpRequest = HttpRequest;
//# sourceMappingURL=httprequest.js.map