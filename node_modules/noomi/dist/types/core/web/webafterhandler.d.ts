import { FilterOption } from "../types/types";
import { HttpRequest } from "./httprequest";
import { HttpResponse } from "./httpresponse";
/**
 * web后置处理，对web请求结果进行再处理
 * 如果处理方法返回为null，则处理链不再继续处理
 */
export declare class WebAfterHandler {
    /**
     * 过滤器实例数组
     */
    private static handlers;
    /**
     * 处理实例过滤器
     * @param cfg -  过滤器配置
     */
    static addHandler(cfg: FilterOption): void;
    /**
     * 获取过滤器链
     * @param url -   资源url
     * @returns     filter数组
     */
    private static getHandlerChain;
    /**
     * 执行过滤器链
     * @param url -     url路径
     * @param result -  处理结果
     * @param request - request 对象
     * @param response -response 对象
     * @returns         处理结果进行方法链处理，返回最后的处理结果
     */
    static doChain(url: string, result: unknown, request: HttpRequest, response: HttpResponse): Promise<unknown>;
}
