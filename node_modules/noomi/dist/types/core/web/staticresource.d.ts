import { HttpResponse } from "./httpresponse";
import { HttpRequest } from "./httprequest";
import { WebCacheItem } from "../types/webtypes";
/**
 * 静态资源加载器
 */
export declare class StaticResource {
    /**
     * 静态资源map，用于管理可访问静态资源路径，目录可以带通配符‘*’
     */
    static staticMap: Map<string, RegExp>;
    /**
     * 可压缩类型，也是缓存类型
     */
    static zipTypes: Array<RegExp>;
    /**
     * 加载静态资源
     * @param request -   request
     * @param response -  response
     * @param path -      文件路径
     * @param zip -       是否压缩
     * @returns         http code 或 缓存数据
     */
    static load(request: HttpRequest, response: HttpResponse, path: string, zip?: boolean): Promise<number | WebCacheItem>;
    /**
     * 添加静态路径
     * @param paths -   待添加的目录或目录数组
     */
    static addPath(paths: string | string[]): void;
    /**
     * 读文件
     * @param path -      绝对路径
     * @param zip -       压缩方法
     * @returns         cache数据对象
     */
    static readFile(path: string, zip?: boolean): Promise<WebCacheItem>;
    /**
     * 检查mime类型文件是否需要压缩
     * @param mimeType - mimeType对象
     */
    static checkNeedZip(mimeType: string): boolean;
}
