/// <reference types="node" />
import { ServerResponse, IncomingMessage } from "http";
import { HttpCookie } from "./httpcookie";
import { ERouteResultType } from "../types/routetypes";
import { ResponseWriteOption } from "../types/webtypes";
/**
 * http响应
 * @remarks
 * 在ServerResponse基础上增加了写客户端方法，更适合直接使用
 */
export declare class HttpResponse extends ServerResponse {
    /**
     * 源response
     */
    srcRes: ServerResponse;
    /**
     * 源request
     */
    request: IncomingMessage;
    /**
     * cookie
     */
    cookie: HttpCookie;
    /**
     * 初始化response对象
     * @param req -   源request对象
     * @param res -   源response对象
     */
    init(req: IncomingMessage, res: ServerResponse): void;
    /**
     * 写到浏览器(客户)端
     * @param config -    回写配置项
     */
    writeToClient(config: ResponseWriteOption): void;
    /**
     * 写数据流到浏览器(客户端)
     * @param config -    回写配置项
     * @param mimeType -  mime 类型
     */
    writeFileToClient(config: ResponseWriteOption): void;
    /**
     * 设置回传header
     * @param key -     键
     * @param value -   值
     * @returns         HttpResponse实例
     */
    setHeader(name: string, value: number | string | string[]): this;
    /**
     * 获取header值
     * @param key -     键
     * @returns         header值
     */
    getHeader(key: string): number | string | string[];
    /**
     * 重定向
     * @param page -    跳转路径url
     * @returns         redirect
     */
    redirect(page: string): ERouteResultType;
    /**
     * 写cookie到header
     */
    writeCookie(): string;
    /**
     * 设置跨域头
     */
    setCorsHead(): void;
    /**
     * 设置回写类型
     * @param type -      类型
     */
    setContentType(type: string): void;
    /**
     * 设置content length
     * @param length -    内容长度
     */
    setContentLength(length: number): void;
    /**
     * 处理head方法请求
     * @returns         如果请方法为head，则返回true，否则返回false
     */
    doHead(): boolean;
    /**
     * 处理trace方法请求
     */
    doTrace(): void;
    /**
     * 处理options请求方法
     */
    doOptions(): void;
}
