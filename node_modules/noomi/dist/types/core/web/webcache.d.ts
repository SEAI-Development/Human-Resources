import { NCache } from "../tools/ncache";
import { WebCacheItem, WebCacheOption } from "../types/webtypes";
import { HttpRequest } from "./httprequest";
import { HttpResponse } from "./httpresponse";
/**
 * web 缓存类
 * @remarks
 * 用于管理缓存资源
 */
export declare class WebCache {
    /**
     * cache对象
     */
    static cache: NCache;
    /**
     * cache-control max-age
     */
    static maxAge: number;
    /**
     * cache-control public
     */
    static isPublic: boolean;
    /**
     * cache-control privite
     */
    static isPrivate: boolean;
    /**
     * cache-control no-cache
     */
    static noCache: boolean;
    /**
     * cache-control no-store
     */
    static noStore: boolean;
    /**
     * cache-control must-revalidation
     */
    static mustRevalidation: boolean;
    /**
     * cache-control proxy-revalidation
     */
    static proxyRevalidation: boolean;
    /**
     * expires
     */
    static expires: number;
    /**
     * 单个文件最大size
     */
    static maxSingleSize: number;
    /**
     * 不能缓存的媒体类型
     */
    /**
     * 初始化
     * @param cfg -   配置项，包括:
     *                  file_type           缓存文件类型，默认[*]
     *                  max_age             cache-control max-age
     *                  no_cache            cache-control no-cache
     *                  no_store            cache-control no-store
     *                  public              cache-control public
     *                  private             cache-control privite
     *                  must_revalidation   cache-control must-revalidation
     *                  proxy_revalidation  cache-control proxy-revalidation
     *                  expires             过期时间(秒)
     *                  max_single_size     单个缓存文件最大尺寸
     */
    static init(cfg: WebCacheOption): Promise<void>;
    /**
     * 添加资源到缓存中
     * @param url -           url请求url
     * @param cacheData -     待缓存数据
     */
    static add(url: string, cacheData: WebCacheItem): Promise<void>;
    /**
     * 加载资源
     * @param request -   request
     * @param response -  response
     * @param url -       url
     * @param gzip -      压缩类型 br,gzip,deflate
     * @returns         0无缓存，异常码 或 cache数据
     */
    static load(request: HttpRequest, response: HttpResponse, url: string): Promise<number | object>;
    /**
     * 获取cache data
     * @param url -   缓存的url
     */
    static getCacheData(url: string): Promise<object>;
    /**
     * 写cache到客户端
     * @param response -          response对象
     * @param etag -              etag            文件hash码
     * @param lastModified -      lasmodified     最后修改时间
     */
    static writeCacheToClient(response: HttpResponse, etag?: string, lastModified?: string): void;
    /**
     * 资源check，如果需要更改，则从服务器获取
     * @param request -   request对象
     * @returns         0:从浏览器获取 1:已更新 2:资源不在缓存
     */
    static check(request: HttpRequest, url: string): Promise<number>;
}
