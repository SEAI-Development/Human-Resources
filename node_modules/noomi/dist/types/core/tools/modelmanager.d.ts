import { BaseRoute } from "../main/route/baseroute";
import { PropOption, UnknownClass } from "../types/other";
/**
 * model管理器
 * @remarks
 * 管理所有DataModel的数据校验、类型转换信息并提供校验和类型转换操作
 */
export declare class ModelManager {
    /**
     * 模型map
     * @remarks
     * key: model类名
     *
     * value:配置项
     * ```json
     * {
     *      propName:{
     *          type:'类型',
     *          validator:{validator1:[],...}
     *      },
     *      ...
     * }
     * ```
     */
    private static propMap;
    /**
     * null检测属性map
     * @remarks
     * 按遗下方式存储，key:类名.方法名，value:需要nullcheck的字段数组
     * ```json
     * {
     *      className.methodName:[nullCheckField1,nullCheckField2,...]
     * }
     * ```
     */
    private static nullCheckMap;
    /**
     * 增加null check
     * @param className -   类名
     * @param methodName -  方法名
     * @param props -       检测数组
     */
    static setNullCheck(className: string, methodName: string, props: string[]): void;
    /**
     * 获取空校验属性数组
     * @param className -   类名
     * @param methodName -  方法名
     * @returns             空校验属性数组
     */
    static getNullCheck(className: string, methodName: string): string[];
    /**
     * 设置属性
     * @param className -   类名
     * @param propName -    属性名
     * @param cfg -         配置项，包含类型和校验器
     */
    static setProp(className: string, propName: string, cfg: PropOption): void;
    /**
     * 获取属性配置
     * @param clazz -       类
     * @param propName -    属性名
     * @returns             属性配置
     */
    static getProp(clazz: UnknownClass, propName: string): PropOption;
    /**
     * 转换和校验，返回数据类型或校验不正确的属性消息集合
     * @param route -       路由对象
     * @param methodName -  方法名
     * @param model -       待处理模型
     * @returns             类型转换或校验结果
     */
    static handle(route: BaseRoute, methodName: string, model: any): object;
    /**
     * 验证
     * @param model -       模型
     * @param name -        属性名
     * @param validator -   校验器
     * @returns     null或字符串(表示验证异常)
     */
    static validate(model: any, name: string, validator: any): string;
    /**
     * 数据格式转换
     * @param model -   模型
     * @param name -    属性名
     * @returns         如果失败，则返回失败信息
     */
    private static transform;
}
