import { PropOption } from '../types/other';
import { RouteConfig } from '../types/routetypes';
import { InstanceOption } from '../types/instancetypes';
import { LogOption } from '../types/logtypes';
/**
 * instance装饰器，添加实例到实例工厂，装饰类
 * @param cfg - 配置项或singleton设置，如果为boolean，则为singleton设置
 */
export declare function Instance(cfg?: InstanceOption | boolean): (target: any) => void;
/**
 * IoC注入装饰器，装饰属性
 * @param clazz -   注入类
 */
export declare function Inject(clazz: unknown): (target: unknown, propertyName: string) => void;
/**
 * 路由类装饰器，装饰类
 * @param cfg - 配置项，如果为字符串，则表示为namespace
 *
 * 说明：
 *
 *   namespace:命名空间，可选，namespace+path匹配的方法名=路由完整路径
 *
 *   path:路径，支持通配符,如: "*"表示该类下的所有方法，"add*"表示以add开头的所有方法
 */
export declare function Router(cfg?: RouteConfig | string): (target: any) => void;
/**
 * 路由装饰器，装饰方法
 * @param cfg - 配置项，如果为string，则为路由路径，默认type=‘json’
 *
 */
export declare function Route(cfg: RouteConfig | string): (target: unknown, propertyName: string) => void;
/**
 * web过滤器，装饰方法
 * @param pattern - RegExp|Array<RegExp>  过滤正则表达式或表达式数组，默认为 .*，过滤所有请求
 * @param order -   number                优先级，值越小优先级越高，默认10000，可选
 */
export declare function WebFilter(pattern?: RegExp | RegExp[], order?: number): (target: unknown, name: string) => void;
/**
 * web后置处理器，装饰方法
 * @param pattern - 过滤正则表达式或表达式数组，默认为 .*，处理所有请求
 * @param order -   优先级，值越小优先级越高，默认10000，可选
 */
export declare function WebHandler(pattern?: RegExp | Array<RegExp>, order?: number): (target: unknown, name: string) => void;
/**
 * 切面装饰器，装饰类
 */
export declare function Aspect(): (target: any) => void;
/**
 * 切点装饰器，切点名为属性名，装饰属性
 * @param expressions - 切点需要拦截的表达式串数组
 * @remarks
 * 支持通配符*，拦截对象为instanceName.methodName，
 *
 * 如`user*.*`拦截实例名为user开头的实例下的所有方法，
 *
 * `userX.m1`拦截实例名为userX的m1方法
 */
export declare function Pointcut(expressions?: string[]): (target: unknown, name: string) => void;
/**
 * 通知装饰器 before，装饰方法
 * @param pointcutId -  切点id
 */
export declare function Before(pointcutId: string): (target: unknown, name: string) => void;
/**
 * 通知装饰器 after，装饰方法
 * @param pointcutId -  切点id
 */
export declare function After(pointcutId: string): (target: unknown, name: string) => void;
/**
 * 通知装饰器 around，装饰方法
 * @param pointcutId -  切点id
 */
export declare function Around(pointcutId: string): (target: unknown, name: string) => void;
/**
 * 通知装饰器 after-return，装饰方法
 * @param pointcutId -  切点id
 */
export declare function AfterReturn(pointcutId: string): (target: unknown, name: string) => void;
/**
 * 通知装饰器 after-throw，装饰方法
 * @param pointcutId -  切点id
 */
export declare function AfterThrow(pointcutId: string): (target: unknown, name: string) => void;
/**
 * 事务类装饰器，装饰类
 * @remarks
 * 把符合条件的方法装饰为事务方法，如果没有使用Instance装饰器，则会默认添加
 *
 * @param methodReg - 方法名表达式，字符串或字符串数组，可以使用含`*`的通配符，默认为`*`，表示该实例的所有方法都为事务方法
 */
export declare function Transactioner(methodReg?: string | string[]): (target: any) => void;
/**
 * 事务方法装饰器，装饰方法
 * @remarks
 * 如果没有Transactioner和Instance修饰此方法对应的类，则会默认添加Instance装饰器
 */
export declare function Transaction(): (target: unknown, name: string) => void;
/**
 * 数据模型装饰器，装饰类
 * @param clazz - 模型类
 */
export declare function DataModel(clazz: unknown): (target: any) => void;
/**
 * 属性装饰器，装饰属性，使用DataModel时有效
 * @param cfg - 配置项，如果为字符串，则表示为类型
 */
export declare function Prop(cfg?: PropOption | string): (target: unknown, name: string) => void;
/**
 * 数据null检查，装饰路由方法
 * @param props -     待检查属性数组
 */
export declare function NullCheck(props: Array<string>): (target: unknown, name: string) => void;
/**
 * 日志装饰器，装饰类
 * @param cfg -  配置对象
 */
export declare function Logger(cfg: LogOption): (target: unknown) => void;
/**
 * 钩子函数装饰器，装饰方法
 * @remarks
 * 用于项目初始化完成后的自定义代码执行
 * @param params -      钩子方法的参数数组
 */
export declare function LaunchHook(params?: Array<unknown>): (target: any, methodName: any) => void;
