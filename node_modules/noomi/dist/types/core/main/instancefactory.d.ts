import { UnknownClass } from "../types/other";
import { InstanceItem, InstanceOption } from "../types/instancetypes";
/**
 * 实例工厂
 * @remarks
 * 用于管理所有的实例对象
 */
export declare class InstanceFactory {
    /**
     * 实例工厂map
     * @remarks
     * 用于存放所有实例对象
     *
     * key：类
     *
     * value: 实例
     */
    static factory: Map<unknown, InstanceItem>;
    /**
     * 工厂初始化
     * @param config -    配置串
     * ```js
     * {
     * //模块基础路径(可选配置)，模块从该路径中加载，配置该路径后，模块路径采用相对路径配置，
     * // 注：该路径为js路径，而不是ts路径，相对于项目根目录
     * // "module_path":["/dist/test/app/module"],
     * //实例数组，两种配置方式，如果数组元素为字符串，则加载符合路径规则的所有模块，
     * //如果为对象，则单个加载模块
     * //所有模块必须为class
     * "instances":[
     *   //字符串模式，加载符合路径规则的js文件，该路径相对于项目根目录，
     *   //支持通配符*，**表示自己及所有子孙目录。
     *   //采用该方式，模块类必须用`@Instance或 @Router注解`
     *   `"/dist/test/app/module/**\/*.js",`
     *   //对象模式，加载单个模块
     *   {
     *       "name":"logAdvice", 			//实例名，不可重复，必填
     *       "class":"LogAdvice",			//类名，必填
     *       "path":"advice/logadvice",		//模块路径，相对于module_path中的路径，必填
     *       "singleton":true,				//是否单例，布尔型，默认true,
     *       "properties":[                  //注入对象
     *           {
     *               "name":"commonTool",    //属性名
     *               "ref":"commInstanceTool"//引用实例名
     *           }
     *       ]
     *   }
     * ],
     * 实例配置子路径(可选配置)，路径相对于初始的config路径(该路径在noomi初始化时传入，默认/config)
     * 当模块过多时，可采用该方式分路径配置，如：
     *  "files":["context/action.json"]
     * }
     * ```
     */
    static init(config: string): Promise<void>;
    /**
     * 添加单例到工厂
     * @param clazz -   实例对应的类
     * @param cfg -     实例配置对象或singleton，如果为boolean，则为singleton类型
     */
    static addInstance(clazz: unknown, cfg?: InstanceOption | boolean): void;
    /**
     * 注入
     * @param targetClass -     目标类
     * @param propName -        目标属性名
     * @param injectClass -     注入类
     */
    static inject(targetClass: unknown, propName: string, injectClass: unknown): void;
    /**
     * 获取实例
     * @param clazz -   实例对应的类名
     * @param params -  参数数组
     * @returns         实例化的对象或null
     */
    static getInstance(clazz: unknown, params?: Array<unknown>): unknown;
    /**
     * 获取实例配置对象
     * @param clazz -  实例名
     * @returns      实例配置对象
     */
    static getInstanceCfg(clazz: UnknownClass): InstanceItem;
    /**
     * 执行实例的一个方法
     * @param instance -    实例类或实例对象
     * @param methodName -  方法名
     * @param params -      参数数组
     * @param func -        方法(与methodName二选一)
     * @returns             方法对应的结果
     */
    static exec(instance: unknown, methodName: string, params: Array<unknown>, func?: (params: unknown[]) => unknown): unknown;
    /**
     * 解析instance配置文件
     * @param path - 配置文件路径
     */
    private static parse;
    /**
     * 类是否已添加到工厂
     * @param clazz -     类对象
     * @returns         true/false
     */
    static hasClass(clazz: unknown): boolean;
    /**
     * 获取instance工厂
     * @returns     实例工厂
     */
    static getFactory(): Map<unknown, InstanceItem>;
}
