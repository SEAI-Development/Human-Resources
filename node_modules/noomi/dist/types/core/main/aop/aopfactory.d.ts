import { AopAdvice, AopAdviceCollection, AopPointcutOption } from "../../types/aoptypes";
import { UnknownClass } from "../../types/other";
import { AopPointcut } from "./aoppointcut";
/**
 * Aop工厂
 * 用于管理所有切面、切点
 */
export declare class AopFactory {
    /**
     * 切点map
     * @remarks
     * 用于存储所有切点
     *
     * key:className.pointcutName
     *
     * value: pointcut
     */
    private static pointcuts;
    /**
     * 已代理方法map
     * key: instanctName.methodName
     * value: 切点集合
     */
    private static proxyMethodMap;
    /**
     * 注册切面map
     * @remarks
     * key:class
     *
     * value:object
     * ```json
     *  {
     *      isAspect:true,  // 避免用了pointcut，但是未使用Aspect注解
     *      pointCutId1:{
     *          expressions:Array<string>,
     *          advices:{type:类型,method:方法名}
     *      },
     *      ...
     *   }
     * ```
     */
    private static registAspectMap;
    /**
     * 注册切点
     * @param cfg -   pointcut配置
     */
    static registPointcut(cfg: AopPointcutOption): void;
    /**
     * 注册advice
     * @param cfg -   advice配置
     */
    static registAdvice(cfg: AopAdvice): void;
    /**
     * 从registAspectMap中获取注册的pointcut配置
     * @param clazz -         切面类
     * @param pointcutId -    切点id
     * @param create -        如果不存在，是否创建，如果为true，则创建，默认false
     * @returns             pointcut配置项
     */
    private static getRegistPointcut;
    /**
     * 添加切面
     * @remarks
     *
     * @param clazz -   切面类
     */
    static addAspect(clazz: unknown): void;
    /**
     * 为切点添加表达式
     * @param pointcutId -  切点id
     * @param expression -  表达式或数组
     */
    static addExpression(pointcutId: string, expression: string | Array<string>): void;
    /**
     * 为所有aop匹配的方法设置代理
     */
    static proxyAll(): void;
    /**
     * 为某个类设置代理
     * @param clazz - 类
     */
    private static proxyOne;
    /**
     * 根据id获取切点
     * @param pointcutId -    切点id
     * @returns             切点对象
     */
    static getPointcutById(pointcutId: string): AopPointcut;
    /**
     * 获取某个方法对应的advices
     * @param clazz -       类
     * @param methodName -  方法名
     * @returns             advice集合
     */
    static getAdvices(clazz: UnknownClass, methodName: string): AopAdviceCollection;
}
