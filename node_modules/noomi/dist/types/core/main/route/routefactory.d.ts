import { HttpRequest } from "../../web/httprequest";
import { HttpResponse } from "../../web/httpresponse";
import { RouteInst, RouteConfig } from "../../types/routetypes";
/**
 * 路由工厂类
 * @remarks
 * 管理所有路由对象，进行路由处理
 */
export declare class RouteFactory {
    /**
     * 路由集合
     * key: 路由路径
     */
    static routeMap: Map<string, RouteConfig>;
    /**
     * 注册路由map
     * @remarks
     * 由于`@Route和@Router`的执行顺序问题，为避免路由重复添加，初始化结束后统一处理
     *
     * key: 类
     *
     * value: RouterClass配置
     */
    private static registRouteMap;
    /**
     * 注册路由
     * @param cfg -   路由配置
     */
    static registRoute(cfg: RouteConfig): void;
    /**
     * 处理注册的路由
     * @remarks
     * 把所有注册的路由添加到路由工厂
     */
    static handleRegistedRouters(): void;
    /**
     * 添加路由
     * @param path -          路由路径，支持通配符*，需要method支持
     * @param clazz -         对应类
     * @param methodName -    方法名
     * @param results -       路由处理结果集
     */
    private static addRoute;
    /**
     * 根据路径获取路由对象
     * @param path -    url路径
     * @returns         路由对象
     */
    static getRoute(path: string): RouteInst;
    /**
     * 路由方法执行
     * @param route -       路由
     * @param req -         request 对象
     * @param res -         response 对象
     * @param params -      调用参数对象
     * @returns             路由执行结果
     */
    static handleRoute(route: RouteInst, req: HttpRequest, res: HttpResponse, params?: object): Promise<unknown>;
    /**
     * 处理路由结果
     * @param route -   route对象
     * @param data -    路由对应方法的返回值
     * @returns         处理后的结果
     */
    static handleResult(route: RouteInst, data: object | string): Promise<unknown>;
    /**
     * 处理一个路由结果
     * @param route -       route对象
     * @param result -      route result
     * @param data -        路由执行结果
     * @returns             cache数据对象或0
     */
    private static handleOneResult;
}
